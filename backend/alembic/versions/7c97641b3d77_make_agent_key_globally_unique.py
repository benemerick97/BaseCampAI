"""make agent_key globally unique

Revision ID: 7c97641b3d77
Revises: 50fee4f1f9b8
Create Date: 2025-06-29 09:53:14.278839

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7c97641b3d77'
down_revision: Union[str, Sequence[str], None] = '50fee4f1f9b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

    # 1. Drop the old unique constraint on (org_id, agent_key) if it exists
    op.drop_constraint(op.f('uix_org_agent_key'), 'agents', type_='unique')

    # 2. Create a NEW unique constraint ONLY on agent_key
    op.create_unique_constraint("uq_agents_agent_key", 'agents', ['agent_key'])

    # 3. Create the document_objects table (unchanged)
    op.create_table('document_objects',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('org_id', sa.Integer(), nullable=False),
        sa.Column('review_date', sa.Date(), nullable=True),
        sa.Column('current_file_id', sa.UUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['current_file_id'], ['document_files.id'], name='fk_current_file_id', use_alter=True),
        sa.ForeignKeyConstraint(['org_id'], ['organisations.id']),
        sa.PrimaryKeyConstraint('id')
    )

    # 4. Create the agent_documents table (AFTER agent_key is unique)
    op.create_table('agent_documents',
        sa.Column('agent_id', sa.String(), nullable=False),
        sa.Column('document_id', sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(['agent_id'], ['agents.agent_key'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['document_id'], ['document_objects.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('agent_id', 'document_id')
    )

    # 5. Create the document_files table
    op.create_table('document_files',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('document_id', sa.UUID(), nullable=False),
        sa.Column('file_path', sa.String(), nullable=False),
        sa.Column('original_filename', sa.String(), nullable=False),
        sa.Column('uploaded_at', sa.DateTime(), nullable=True),
        sa.Column('version', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['document_id'], ['document_objects.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )

    # 6. Drop assets table (this was auto-generated, leave unchanged if intentional)
    op.drop_index(op.f('ix_assets_id'), table_name='assets')
    op.drop_table('assets')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'agents', type_='unique')
    op.create_unique_constraint(op.f('uix_org_agent_key'), 'agents', ['org_id', 'agent_key'], postgresql_nulls_not_distinct=False)
    op.create_table('assets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('asset_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('serial_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('site_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('organisation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name=op.f('assets_organisation_id_fkey')),
    sa.ForeignKeyConstraint(['site_id'], ['sites.id'], name=op.f('assets_site_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('assets_pkey'))
    )
    op.create_index(op.f('ix_assets_id'), 'assets', ['id'], unique=False)
    op.drop_table('document_files')
    op.drop_table('agent_documents')
    op.drop_table('document_objects')
    # ### end Alembic commands ###
