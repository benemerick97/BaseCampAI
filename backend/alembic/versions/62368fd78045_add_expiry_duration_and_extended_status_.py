"""Add expiry_duration and extended status to assigned_courses

Revision ID: 62368fd78045
Revises: d1c35c0fe674
Create Date: 2025-07-17 02:57:55.232243

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '62368fd78045'
down_revision: Union[str, Sequence[str], None] = 'd1c35c0fe674'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Drop dependent tables first to avoid FK errors
    op.drop_table('input_fields')
    op.drop_table('workflow_steps')
    op.drop_table('step_groups')
    op.drop_table('workflows')  # Now it's safe

    # Add new columns
    op.add_column('assigned_courses', sa.Column('reassigned_at', sa.DateTime(), nullable=True))
    op.add_column('assigned_courses', sa.Column('expiry_duration', sa.Interval(), nullable=True))
    op.add_column('assigned_modules', sa.Column('reassigned_at', sa.DateTime(), nullable=True))
    op.add_column('assigned_modules', sa.Column('expiry_duration', sa.Interval(), nullable=True))
    op.add_column('assigned_skills', sa.Column('reassigned_at', sa.DateTime(), nullable=True))
    op.add_column('assigned_skills', sa.Column('expiry_duration', sa.Interval(), nullable=True))

    # Alter course slides column
    op.alter_column('courses', 'slides',
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=False
    )



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('courses', 'slides',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('assigned_skills', 'expiry_duration')
    op.drop_column('assigned_skills', 'reassigned_at')
    op.drop_column('assigned_modules', 'expiry_duration')
    op.drop_column('assigned_modules', 'reassigned_at')
    op.drop_column('assigned_courses', 'expiry_duration')
    op.drop_column('assigned_courses', 'reassigned_at')
    op.create_table('step_groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('step_groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], name='step_groups_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='step_groups_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('input_fields',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('step_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('input_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('options', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['step_id'], ['workflow_steps.id'], name=op.f('input_fields_step_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('input_fields_pkey'))
    )
    op.create_table('workflow_steps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('instructions', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['step_groups.id'], name=op.f('workflow_steps_group_id_fkey')),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], name=op.f('workflow_steps_workflow_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workflow_steps_pkey'))
    )
    op.create_table('workflows',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_template', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('organisation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'published', 'archived', name='workflowstatus'), server_default=sa.text("'draft'::workflowstatus"), autoincrement=False, nullable=False),
    sa.Column('last_saved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('autosaved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisations.id'], name=op.f('workflows_organisation_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('workflows_pkey'))
    )
    # ### end Alembic commands ###
